%---------------------------------------------------------------------------
% Problem : hets_exported
% Name    : Vickrey_proof_trans_Lemmas1_test_spa_winner_payoff_0step
% Author  : hets
% Status  : unknown
% Desc    :
% Date    : 2013-05-02 14:15:44.386888 UTC
% Option  :  set_flag(Requested prover: eprover)
%---------------------------------------------------------------------------
fof(declaration0,axiom,
    ! [Y0] : (index(Y0) => nat(Y0))).
fof(declaration1,axiom,
    ! [Y0] : (length(Y0) => nat(Y0))).
fof(declaration2,axiom,
    ! [X1] : (bids(X1) => length(length_1(X1)))).
fof(declaration3,axiom,
    ! [X1] : (bids(X1) => real(maximum(X1)))).
fof(declaration4,axiom,
    ! [X1, X2] : ((bids(X1) & index(X2))
                  => real(maximumExcept(X1, X2)))).
fof(declaration5,axiom,
    ! [X1, X2] : ((real(X1) & real(X2)) => real(o__Minus__(X1, X2)))).
fof(declaration6,axiom,
    ! [X1, X2] : ((bids(X1) & index(X2))
                  => real(o__OSqBr__CSqBr(X1, X2)))).
fof(declaration7,axiom,
    ! [X1, X2, X3] : ((bids(X1) & index(X2) & real(X3))
                      => bids(o__OSqBr__ColonEq__CSqBr(X1, X2, X3)))).
fof(declaration8,axiom,
    ! [X1, X2, X3] : ((bids(X1) & index(X2) & bids(X3))
                      => bids(o__OSqBr__LtMinus__CSqBr(X1, X2, X3)))).
fof(declaration9,axiom,
    ! [X1, X2] : ((real(X1) & real(X2)) => real(o__x__(X1, X2)))).
fof(declaration10,axiom,
    real(one)).
fof(declaration11,axiom,
    nat(one_0)).
fof(declaration12,axiom,
    ! [X1, X2, X3] : ((payments(X1) & bids(X2) & index(X3))
                      => real(payment(X1, X2, X3)))).
fof(declaration13,axiom,
    ! [X1, X2, X3] : ((real(X1) & boolean(X2) & real(X3))
                      => real(payoff(X1, X2, X3)))).
fof(declaration14,axiom,
    ! [X1, X2, X3, X4, X5] : ((bids(X1) & bids(X2) & allocation(X3)
                               & payments(X4) & index(X5))
                              => real(payoff_5(X1, X2, X3, X4, X5)))).
fof(declaration15,axiom,
    ! [X1, X2] : ((bids(X1) & index(X2))
                  => real(secondPriceAuctionWinnersPayment(X1, X2)))).
fof(declaration16,axiom,
    boolean(x_False)).
fof(declaration17,axiom,
    boolean(x_True)).
fof(declaration18,axiom,
    real(zero)).
fof(declaration19,axiom,
    nat(zero_0)).
fof(disjoint_sorts_allocation_bids,axiom,
    ! [Y1, Y2] : ((allocation(Y1) & bids(Y2)) => ~ Y1 = Y2)).
fof(disjoint_sorts_allocation_boolean,axiom,
    ! [Y1, Y2] : ((allocation(Y1) & boolean(Y2)) => ~ Y1 = Y2)).
fof(disjoint_sorts_allocation_nat,axiom,
    ! [Y1, Y2] : ((allocation(Y1) & nat(Y2)) => ~ Y1 = Y2)).
fof(disjoint_sorts_allocation_payments,axiom,
    ! [Y1, Y2] : ((allocation(Y1) & payments(Y2)) => ~ Y1 = Y2)).
fof(disjoint_sorts_allocation_real,axiom,
    ! [Y1, Y2] : ((allocation(Y1) & real(Y2)) => ~ Y1 = Y2)).
fof(disjoint_sorts_bids_boolean,axiom,
    ! [Y1, Y2] : ((bids(Y1) & boolean(Y2)) => ~ Y1 = Y2)).
fof(disjoint_sorts_bids_nat,axiom,
    ! [Y1, Y2] : ((bids(Y1) & nat(Y2)) => ~ Y1 = Y2)).
fof(disjoint_sorts_bids_payments,axiom,
    ! [Y1, Y2] : ((bids(Y1) & payments(Y2)) => ~ Y1 = Y2)).
fof(disjoint_sorts_bids_real,axiom,
    ! [Y1, Y2] : ((bids(Y1) & real(Y2)) => ~ Y1 = Y2)).
fof(disjoint_sorts_boolean_nat,axiom,
    ! [Y1, Y2] : ((boolean(Y1) & nat(Y2)) => ~ Y1 = Y2)).
fof(disjoint_sorts_boolean_payments,axiom,
    ! [Y1, Y2] : ((boolean(Y1) & payments(Y2)) => ~ Y1 = Y2)).
fof(disjoint_sorts_boolean_real,axiom,
    ! [Y1, Y2] : ((boolean(Y1) & real(Y2)) => ~ Y1 = Y2)).
fof(disjoint_sorts_nat_payments,axiom,
    ! [Y1, Y2] : ((nat(Y1) & payments(Y2)) => ~ Y1 = Y2)).
fof(disjoint_sorts_nat_real,axiom,
    ! [Y1, Y2] : ((nat(Y1) & real(Y2)) => ~ Y1 = Y2)).
fof(disjoint_sorts_payments_real,axiom,
    ! [Y1, Y2] : ((payments(Y1) & real(Y2)) => ~ Y1 = Y2)).
fof(ga_exhaustive_generated_sort_Boolean,axiom,
    ! [X] : (boolean(X) => (X = x_False | X = x_True))).
fof(ga_non_empty_sort_allocation,axiom,
    ? [Y] : allocation(Y)).
fof(ga_non_empty_sort_bids,axiom,
    ? [Y] : bids(Y)).
fof(ga_non_empty_sort_boolean,axiom,
    ? [Y] : boolean(Y)).
fof(ga_non_empty_sort_index,axiom,
    ? [Y] : index(Y)).
fof(ga_non_empty_sort_length,axiom,
    ? [Y] : length(Y)).
fof(ga_non_empty_sort_nat,axiom,
    ? [Y] : nat(Y)).
fof(ga_non_empty_sort_payments,axiom,
    ? [Y] : payments(Y)).
fof(ga_non_empty_sort_real,axiom,
    ? [Y] : real(Y)).
fof(allocation_unique,axiom,
    ! [B, X, N, Winner, Other] : ((bids(B) & allocation(X) & length(N)
                                   & index(Winner) & index(Other))
                                  => ((((((allocation_2(B, X) & N = length_1(B))
                                          & inRange(N, Winner))
                                         & allocated(X, B, Winner))
                                        & inRange(N, Other))
                                       & allocated(X, B, Other))
                                      => Other = Winner))).
fof(only_one_maximum,axiom,
    ! [B, I, N] : ((bids(B) & index(I) & length(N))
                   => (((((length_1(B) = N & p__Gt___2(N, one_0))
                          & inRange(N, I))
                         & p__LtEq__(maximumExcept(B, I),
                                     o__OSqBr__CSqBr(B, I)))
                        & ~ maximumExcept(B, I) = o__OSqBr__CSqBr(B, I))
                       => (inArgMaxSet(B, I)
                           & ! [J] : (index(J)
                                      => ((inRange(N, J) & ~ J = I)
                                          => ~ inArgMaxSet(B, J))))))).
fof(not_allocated_implies_spa_loser,axiom,
    ! [N, X, P, B, Loser] : ((length(N) & allocation(X) & payments(P)
                              & bids(B) & index(Loser))
                             => ((((secondPriceAuction(N, X, P)
                                    & N = length_1(B))
                                   & inRange(N, Loser))
                                  & ~ allocated(X, B, Loser))
                                 => secondPriceAuctionLoser(N, B, X, P,
                                                            Loser)))).
fof(only_max_bidder_wins,axiom,
    ! [N, X, P, B, MaxBidder] : ((length(N) & allocation(X)
                                  & payments(P) & bids(B) & index(MaxBidder))
                                 => ((((secondPriceAuction(N, X, P)
                                        & N = length_1(B))
                                       & inRange(N, MaxBidder))
                                      & p__Gt__(o__OSqBr__CSqBr(B, MaxBidder),
                                                maximumExcept(B, MaxBidder)))
                                     => secondPriceAuctionWinner(N, B, X, P,
                                                                 MaxBidder)))).
fof(equilibrium_weakly_dominant_strategy_def,axiom,
    ! [N, V, B, X, P] : ((length(N) & bids(V) & bids(B) & allocation(X)
                          & payments(P))
                         => (equilibriumWeaklyDominantStrategy(N, V, B, X, P)
                             <=> ((((length_1(V) = N & length_1(B) = N)
                                    & allocation_2(B, X))
                                   & payments_2(B, P))
                                  & ! [I] : (index(I)
                                             => (inRange(N, I)
                                                 => ! [WhateverBid] : (bids(WhateverBid)
                                                                       => (~ o__OSqBr__CSqBr(WhateverBid,
                                                                                             I)
                                                                             = o__OSqBr__CSqBr(B,
                                                                                               I)
                                                                           => ? [B__] : (bids(B__)
                                                                                         & (B__
                                                                                            = o__OSqBr__LtMinus__CSqBr(WhateverBid,
                                                                                                                       I,
                                                                                                                       V)
                                                                                            & p__GtEq__(payoff_5(V,
                                                                                                                 B__,
                                                                                                                 X,
                                                                                                                 P,
                                                                                                                 I),
                                                                                                        payoff_5(V,
                                                                                                                 WhateverBid,
                                                                                                                 X,
                                                                                                                 P,
                                                                                                                 I)))))))))))).
fof(second_price_auction_def,axiom,
    ! [N, X, P] : ((length(N) & allocation(X) & payments(P))
                   => (secondPriceAuction(N, X, P)
                       <=> (p__Gt___2(N, one_0)
                            & ! [B] : (bids(B)
                                       => (length_1(B) = N
                                           => ((allocation_2(B, X)
                                                & payments_2(B, P))
                                               & ? [I] : (index(I)
                                                          & ((inRange(N, I)
                                                              & secondPriceAuctionWinner(N,
                                                                                         B,
                                                                                         X,
                                                                                         P,
                                                                                         I))
                                                             & ! [J] : (index(J)
                                                                        => ((inRange(N,
                                                                                     J)
                                                                             & ~ J
                                                                                 = I)
                                                                            => secondPriceAuctionLoser(N,
                                                                                                       B,
                                                                                                       X,
                                                                                                       P,
                                                                                                       J)))))))))))).
fof(i_sticks_with_valuation_def,axiom,
    ! [V, N, X, P, I, WhateverBid, ISticksWithValuation] : ((bids(V)
                                                             & length(N)
                                                             & allocation(X)
                                                             & payments(P)
                                                             & index(I)
                                                             & bids(WhateverBid)
                                                             & bids(ISticksWithValuation))
                                                            => (spaWithTruthfulOrOtherBid(N,
                                                                                          X,
                                                                                          P,
                                                                                          V,
                                                                                          WhateverBid,
                                                                                          I,
                                                                                          ISticksWithValuation)
                                                                <=> (((((secondPriceAuction(N,
                                                                                            X,
                                                                                            P)
                                                                         & length_1(V)
                                                                           = N)
                                                                        & length_1(WhateverBid)
                                                                          = N)
                                                                       & inRange(N,
                                                                                 I))
                                                                      & ~ o__OSqBr__CSqBr(WhateverBid,
                                                                                          I)
                                                                          = o__OSqBr__CSqBr(V,
                                                                                            I))
                                                                     & ISticksWithValuation
                                                                       = o__OSqBr__LtMinus__CSqBr(WhateverBid,
                                                                                                  I,
                                                                                                  V))))).
fof(payoff_vector_def,axiom,
    ! [V, B, X, P, I] : ((bids(V) & bids(B) & allocation(X)
                          & payments(P) & index(I))
                         => (((allocation_2(B, X) & payments_2(B, P))
                              & length_1(B) = length_1(V))
                             => ((allocated(X, B, I)
                                  => payoff_5(V, B, X, P, I)
                                     = payoff(o__OSqBr__CSqBr(V, I), x_True,
                                              payment(P, B, I)))
                                 & (~ allocated(X, B, I)
                                    => payoff_5(V, B, X, P, I)
                                       = payoff(o__OSqBr__CSqBr(V, I), x_False,
                                                payment(P, B, I))))))).
fof(payoff_def,axiom,
    ! [V, P, X] : ((real(V) & real(P) & boolean(X))
                   => ((X = x_True
                        => payoff(V, X, P) = o__Minus__(o__x__(V, one), P))
                       & (~ X = x_True
                          => payoff(V, X, P)
                             = o__Minus__(o__x__(V, zero), P))))).
fof(allocation_def,axiom,
    ! [B, X] : ((bids(B) & allocation(X))
                => (allocation_2(B, X)
                    => ? [N] : (length(N)
                                & (N = length_1(B)
                                   & (? [K] : (index(K)
                                               & (inRange(N, K)
                                                  & allocated(X, B, K)))
                                      & ! [K_1, K_2] : ((index(K_1)
                                                         & index(K_2))
                                                        => (((inRange(N, K_1)
                                                              & allocated(X, B,
                                                                          K_1))
                                                             & (inRange(N, K_2)
                                                                & allocated(X,
                                                                            B,
                                                                            K_2)))
                                                            => K_1
                                                               = K_2)))))))).
fof(second_price_auction_winner_def,axiom,
    ! [N, X, P, B, I] : ((length(N) & allocation(X) & payments(P)
                          & bids(B) & index(I))
                         => (secondPriceAuctionWinner(N, B, X, P, I)
                             <=> (((inRange(N, I) & inArgMaxSet(B, I))
                                   & allocated(X, B, I))
                                  & payment(P, B, I)
                                    = secondPriceAuctionWinnersPayment(B,
                                                                       I))))).
fof(second_price_auction_loser_def,axiom,
    ! [N, X, P, B, I] : ((length(N) & allocation(X) & payments(P)
                          & bids(B) & index(I))
                         => (secondPriceAuctionLoser(N, B, X, P, I)
                             <=> ((inRange(N, I) & ~ allocated(X, B, I))
                                  & payment(P, B, I) = zero)))).
fof(second_price_auction_winners_payment_def,axiom,
    ! [B, Winner] : ((bids(B) & index(Winner))
                     => secondPriceAuctionWinnersPayment(B, Winner)
                        = maximumExcept(B, Winner))).
fof(ga_disjoint_True_False,axiom,
    ~ x_True = x_False).
fof(lt_def,axiom,
    ! [X, Y] : ((real(X) & real(Y))
                => (p__Lt__(X, Y) <=> (p__LtEq__(X, Y) & ~ X = Y)))).
fof(gt_def,axiom,
    ! [X, Y] : ((real(X) & real(Y))
                => (p__Gt__(X, Y) <=> ~ p__LtEq__(X, Y)))).
fof(ge_def,axiom,
    ! [X, Y] : ((real(X) & real(Y))
                => (p__GtEq__(X, Y) <=> p__LtEq__(Y, X)))).
fof(one_mult,axiom,
    ! [X] : (real(X) => o__x__(X, one) = X)).
fof(zero_mult,axiom,
    ! [X] : (real(X) => o__x__(X, zero) = zero)).
fof(minus_0,axiom,
    ! [X] : (real(X) => o__Minus__(X, zero) = X)).
fof(x_ge_y,axiom,
    ! [X, Y] : ((real(X) & real(Y))
                => (p__GtEq__(X, Y) => p__GtEq__(o__Minus__(X, Y), zero)))).
fof(exists_different,axiom,
    ! [X] : (real(X) => ? [R] : (real(R) & ~ R = X))).
fof(dichotomy_TotalOrder,axiom,
    ! [X, Y] : ((real(X) & real(Y))
                => (p__LtEq__(X, Y) | p__LtEq__(Y, X)))).
fof(antisym,axiom,
    ! [X, Y] : ((real(X) & real(Y))
                => ((p__LtEq__(X, Y) & p__LtEq__(Y, X)) => X = Y))).
fof(trans,axiom,
    ! [X, Y, Z] : ((real(X) & real(Y) & real(Z))
                   => ((p__LtEq__(X, Y) & p__LtEq__(Y, Z))
                       => p__LtEq__(X, Z)))).
fof(refl,axiom,
    ! [X] : (real(X) => p__LtEq__(X, X))).
fof(deviation_range,axiom,
    ! [V, Dev, Alt, I] : ((bids(V) & bids(Dev) & real(Alt) & index(I))
                          => (Dev = o__OSqBr__ColonEq__CSqBr(V, I, Alt)
                              => ? [N] : (length(N)
                                          & ((length_1(V) = N & inRange(N, I))
                                             & length_1(Dev) = N))))).
fof(deviation_def_index,axiom,
    ! [V, Alt, I] : ((bids(V) & real(Alt) & index(I))
                     => o__OSqBr__CSqBr(o__OSqBr__ColonEq__CSqBr(V, I, Alt), I)
                        = Alt)).
fof(deviation_def_otherwise,axiom,
    ! [V, Alt, I, J] : ((bids(V) & real(Alt) & index(I) & index(J))
                        => (~ J = I
                            => o__OSqBr__CSqBr(o__OSqBr__ColonEq__CSqBr(V, I,
                                                                        Alt),
                                               J)
                               = o__OSqBr__CSqBr(V, J)))).
fof(deviation_vec_range,axiom,
    ! [V, AltV, I] : ((bids(V) & bids(AltV) & index(I))
                      => length_1(o__OSqBr__LtMinus__CSqBr(V, I, AltV))
                         = length_1(AltV))).
fof(deviation_vec_def,axiom,
    ! [V, AltV, I] : ((bids(V) & bids(AltV) & index(I))
                      => o__OSqBr__LtMinus__CSqBr(V, I, AltV)
                         = o__OSqBr__ColonEq__CSqBr(V, I,
                                                    o__OSqBr__CSqBr(AltV, I)))).
fof(gt_one_imp_gt_0,axiom,
    ! [N] : (nat(N) => (p__Gt___2(N, one_0) => p__Gt___2(N, zero_0)))).
fof(arg_max_set_def,axiom,
    ! [B, I] : ((bids(B) & index(I))
                => (inArgMaxSet(B, I) <=> maximum(B) = o__OSqBr__CSqBr(B, I)))).
fof(maximum_is_greater_or_equal,axiom,
    ! [B, I, N] : ((bids(B) & index(I) & length(N))
                   => ((length_1(B) = N & inRange(N, I))
                       => p__LtEq__(o__OSqBr__CSqBr(B, I), maximum(B))))).
fof(maximum_is_component,axiom,
    ! [B, N] : ((bids(B) & length(N))
                => ((length_1(B) = N & p__Gt___2(N, zero_0))
                    => ? [I] : (index(I)
                                & (inRange(N, I)
                                   & maximum(B) = o__OSqBr__CSqBr(B, I)))))).
fof(maximum_sufficient,axiom,
    ! [B, N, M] : ((bids(B) & length(N) & real(M))
                   => ((((length_1(B) = N & p__Gt___2(N, zero_0))
                         & ! [I] : (index(I)
                                    => (inRange(N, I)
                                        => p__LtEq__(o__OSqBr__CSqBr(B, I),
                                                     M))))
                        & ? [I] : (index(I)
                                   & (inRange(N, I)
                                      & M = o__OSqBr__CSqBr(B, I))))
                       => M = maximum(B)))).
fof(maximum_except_is_greater_or_equal,axiom,
    ! [B, I, J, N] : ((bids(B) & index(I) & index(J) & length(N))
                      => (((((length_1(B) = N & p__Gt___2(N, one_0))
                             & inRange(N, J))
                            & inRange(N, I))
                           & ~ I = J)
                          => p__LtEq__(o__OSqBr__CSqBr(B, I),
                                       maximumExcept(B, J))))).
fof(maximum_except_is_component,axiom,
    ! [B, J, N] : ((bids(B) & index(J) & length(N))
                   => (((length_1(B) = N & p__Gt___2(N, one_0)) & inRange(N, J))
                       => ? [I] : (index(I)
                                   & ((inRange(N, I) & ~ I = J)
                                      & maximumExcept(B, J)
                                        = o__OSqBr__CSqBr(B, I)))))).
fof(maximum_greater_or_equal_remaining_maximum,axiom,
    ! [B, J, N] : ((bids(B) & index(J) & length(N))
                   => (((length_1(B) = N & p__Gt___2(N, one_0)) & inRange(N, J))
                       => p__LtEq__(maximumExcept(B, J), maximum(B))))).
fof(remaining_maximum_invariant,axiom,
    ! [B, I, N, Alt] : ((bids(B) & index(I) & length(N) & real(Alt))
                        => (((length_1(B) = N & p__Gt___2(N, one_0))
                             & inRange(N, I))
                            => maximumExcept(B, I)
                               = maximumExcept(o__OSqBr__ColonEq__CSqBr(B, I,
                                                                        Alt),
                                               I)))).
fof(efficient_def,axiom,
    ! [N, V, B, X] : ((length(N) & bids(V) & bids(B) & allocation(X))
                      => (efficient(N, V, B, X)
                          <=> ((length_1(V) = N & length_1(B) = N)
                               & ! [I] : (index(I)
                                          => ((inRange(N, I)
                                               & allocated(X, B, I))
                                              => inArgMaxSet(V, I))))))).
fof(arg_restriction_spaWithTruthfulOrOtherBid,axiom,
    ! [Y0, Y1, Y2, Y3, Y4, Y5, Y6] : (spaWithTruthfulOrOtherBid(Y0, Y1,
                                                                Y2, Y3, Y4, Y5,
                                                                Y6)
                                      => ((((((length(Y0) & allocation(Y1))
                                              & payments(Y2))
                                             & bids(Y3))
                                            & bids(Y4))
                                           & index(Y5))
                                          & bids(Y6)))).
fof(arg_restriction_secondPriceAuctionWinner,axiom,
    ! [Y0, Y1, Y2, Y3, Y4] : (secondPriceAuctionWinner(Y0, Y1, Y2, Y3,
                                                       Y4)
                              => ((((length(Y0) & bids(Y1)) & allocation(Y2))
                                   & payments(Y3))
                                  & index(Y4)))).
fof(arg_restriction_secondPriceAuctionLoser,axiom,
    ! [Y0, Y1, Y2, Y3, Y4] : (secondPriceAuctionLoser(Y0, Y1, Y2, Y3,
                                                      Y4)
                              => ((((length(Y0) & bids(Y1)) & allocation(Y2))
                                   & payments(Y3))
                                  & index(Y4)))).
fof(arg_restriction_secondPriceAuction,axiom,
    ! [Y0, Y1, Y2] : (secondPriceAuction(Y0, Y1, Y2)
                      => ((length(Y0) & allocation(Y1)) & payments(Y2)))).
fof(arg_restriction_payments_2,axiom,
    ! [Y0, Y1] : (payments_2(Y0, Y1) => (bids(Y0) & payments(Y1)))).
fof(arg_restriction_p__Lt__,axiom,
    ! [Y0, Y1] : (p__Lt__(Y0, Y1) => (real(Y0) & real(Y1)))).
fof(arg_restriction_p__LtEq__,axiom,
    ! [Y0, Y1] : (p__LtEq__(Y0, Y1) => (real(Y0) & real(Y1)))).
fof(arg_restriction_p__Gt___2,axiom,
    ! [Y0, Y1] : (p__Gt___2(Y0, Y1) => (nat(Y0) & nat(Y1)))).
fof(arg_restriction_p__Gt__,axiom,
    ! [Y0, Y1] : (p__Gt__(Y0, Y1) => (real(Y0) & real(Y1)))).
fof(arg_restriction_p__GtEq___2,axiom,
    ! [Y0, Y1] : (p__GtEq___2(Y0, Y1) => (nat(Y0) & nat(Y1)))).
fof(arg_restriction_p__GtEq__,axiom,
    ! [Y0, Y1] : (p__GtEq__(Y0, Y1) => (real(Y0) & real(Y1)))).
fof(arg_restriction_notAllocatedImpliesSpaLoserCons,axiom,
    ! [Y0, Y1, Y2, Y3, Y4] : (notAllocatedImpliesSpaLoserCons(Y0, Y1,
                                                              Y2, Y3, Y4)
                              => ((((length(Y0) & bids(Y1)) & allocation(Y2))
                                   & payments(Y3))
                                  & index(Y4)))).
fof(arg_restriction_inRange,axiom,
    ! [Y0, Y1] : (inRange(Y0, Y1) => (length(Y0) & index(Y1)))).
fof(arg_restriction_inArgMaxSet,axiom,
    ! [Y0, Y1] : (inArgMaxSet(Y0, Y1) => (bids(Y0) & index(Y1)))).
fof(arg_restriction_equilibriumWeaklyDominantStrategy,axiom,
    ! [Y0, Y1, Y2, Y3, Y4] : (equilibriumWeaklyDominantStrategy(Y0, Y1,
                                                                Y2, Y3, Y4)
                              => ((((length(Y0) & bids(Y1)) & bids(Y2))
                                   & allocation(Y3))
                                  & payments(Y4)))).
fof(arg_restriction_efficient,axiom,
    ! [Y0, Y1, Y2, Y3] : (efficient(Y0, Y1, Y2, Y3)
                          => (((length(Y0) & bids(Y1)) & bids(Y2))
                              & allocation(Y3)))).
fof(arg_restriction_allocation_2,axiom,
    ! [Y0, Y1] : (allocation_2(Y0, Y1)
                  => (bids(Y0) & allocation(Y1)))).
fof(arg_restriction_allocatedImpliesSpaWinnerCons,axiom,
    ! [Y0, Y1, Y2, Y3, Y4] : (allocatedImpliesSpaWinnerCons(Y0, Y1, Y2,
                                                            Y3, Y4)
                              => ((((length(Y0) & bids(Y1)) & allocation(Y2))
                                   & payments(Y3))
                                  & index(Y4)))).
fof(arg_restriction_allocatedImpliesSpaWinnerAnt,axiom,
    ! [Y0, Y1, Y2, Y3, Y4] : (allocatedImpliesSpaWinnerAnt(Y0, Y1, Y2,
                                                           Y3, Y4)
                              => ((((length(Y0) & bids(Y1)) & allocation(Y2))
                                   & payments(Y3))
                                  & index(Y4)))).
fof(arg_restriction_allocated,axiom,
    ! [Y0, Y1, Y2] : (allocated(Y0, Y1, Y2)
                      => ((allocation(Y0) & bids(Y1)) & index(Y2)))).
fof(test_spa_winner_payoff_0step,conjecture,
    ! [B, N, P, V, Winner, X] : ((bids(B) & length(N) & payments(P)
                                  & bids(V) & index(Winner) & allocation(X))
                                 => ((allocatedImpliesSpaWinnerCons(N, B, X, P,
                                                                    Winner)
                                      & N = length_1(V))
                                     => payoff_5(V, B, X, P, Winner)
                                        = payoff(o__OSqBr__CSqBr(V, Winner),
                                                 x_True,
                                                 payment(P, B, Winner))))).