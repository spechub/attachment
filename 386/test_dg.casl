library HasCASL/Real


spec ConstructField =
sorts Elem, NonZeroElem
sorts NonZeroElem < Elem
op 0 : Elem
op __*__ : Elem * Elem -> Elem
op __*__ : NonZeroElem * NonZeroElem -> NonZeroElem
op __+__ : Elem * Elem -> Elem
op e : Elem
op e : NonZeroElem

end


spec BasicField =
     ConstructField hide sort NonZeroElem
end


spec TotalOrder =
     sort Elem
     pred __ <= __: Elem * Elem
end


spec Field =
     BasicField with op e |-> 1
then %def
     op -__: Elem -> Elem
end

spec FieldWithOrdering =
     Field and TotalOrder
end


spec OrderedField =
     Field
end


spec ExtOrderedField[FieldWithOrdering] =
     TotalOrder
end

spec RichOrderedField = ExtOrderedField[FieldWithOrdering]



logic HasCASL

spec Real =
     RichOrderedField with Elem |-> Real
then
  free type Nat ::= 0 | suc(Nat)
  preds __<=__ :     Real * Real;
      __<=__ :     Real * Real;
      isBounded : Real;
  op    inf,sup :   Real ->? Real;
      inj:        Nat -> Real
then %def
     ops
        |__| : Real -> Real;
then %implies
  {}
end


spec FieldWithValuation =
     Field
and  Real
then
     op val: Elem -> Real
then %implies
  {}
end


spec FieldWithArchimedianValuation =
     Field
and  Real
then
     op val: Elem -> Real
end

view FieldWithValuation_in_FieldWithArchimedianValuation :
     FieldWithValuation
to   FieldWithArchimedianValuation
end


view Real_as_FieldWithArchimedianValuation :
     FieldWithArchimedianValuation to Real
=    Elem |-> Real, val |-> |__|
end
