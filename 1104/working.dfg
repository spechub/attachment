begin_problem(hets_exported).

list_of_descriptions.
name({* Vickrey_SecondPriceAuction_only_max_bidder_wins *}).
author({* hets *}).
status(unknown).
description({*  *}).
date({* 2013-02-08 17:45:14.03145 UTC *}).
end_of_list.

list_of_symbols.
functions
[(deviationVector, 3), (gn_bottom_Real, 0), (length_1, 1),
 (maximum, 1), (maximumExcept, 2), (not__, 1), (o__And__, 2),
 (o__Minus__, 2), (o__OSqBr__CSqBr, 2), (o__Or__, 2), (o__x__, 2),
 (one, 0), (one_0, 0), (payment, 3), (payoff, 5), (payoff_3, 3),
 (secondPriceAuctionWinnersPayment, 2), (x_False, 0), (x_True, 0),
 (zero, 0), (zero_0, 0)].
predicates
[(allocated, 3), (allocation_2, 2), (gn_defined, 1),
 (inArgMaxSet, 2), (inRange, 2), (p__GtEq__, 2), (p__GtEq___2, 2),
 (p__Gt__, 2), (p__Gt___2, 2), (p__LtEq__, 2), (p__Lt__, 2),
 (payments_2, 2), (secondPriceAuction, 2),
 (secondPriceAuctionLoser, 5), (secondPriceAuctionWinner, 5)].
sorts[allocation, bids, boolean, index, length, nat, participant,
      participants, payments, real, valuations, vectorOSqBrRealCSqBr].
end_of_list.

list_of_declarations.
subsort(bids, vectorOSqBrRealCSqBr).
subsort(index, participant).
subsort(length, participants).
subsort(participant, index).
subsort(participants, length).
subsort(payments, vectorOSqBrRealCSqBr).
subsort(valuations, bids).
forall
([vectorOSqBrRealCSqBr(X1), vectorOSqBrRealCSqBr(X2),
  index(X3)], vectorOSqBrRealCSqBr(deviationVector(X1, X2, X3))).
real(gn_bottom_Real).
forall([vectorOSqBrRealCSqBr(X1)], length(length_1(X1))).
forall([vectorOSqBrRealCSqBr(X1)], real(maximum(X1))).
forall
([vectorOSqBrRealCSqBr(X1), index(X2)], real
                                        (maximumExcept(X1, X2))).
forall([boolean(X1)], boolean(not__(X1))).
forall([boolean(X1), boolean(X2)], boolean(o__And__(X1, X2))).
forall([real(X1), real(X2)], real(o__Minus__(X1, X2))).
forall
([vectorOSqBrRealCSqBr(X1), index(X2)], real
                                        (o__OSqBr__CSqBr(X1, X2))).
forall([boolean(X1), boolean(X2)], boolean(o__Or__(X1, X2))).
forall([real(X1), real(X2)], real(o__x__(X1, X2))).
real(one).
nat(one_0).
forall
([payments(X1), bids(X2), participant(X3)], real
                                            (payment(X1, X2, X3))).
forall
([valuations(X1), bids(X2), allocation(X3), payments(X4),
  participant(X5)], real(payoff(X1, X2, X3, X4, X5))).
forall
([real(X1), boolean(X2), real(X3)], real(payoff_3(X1, X2, X3))).
forall
([bids(X1), participant(X2)], real
                              (secondPriceAuctionWinnersPayment(X1, X2))).
boolean(x_False).
boolean(x_True).
real(zero).
nat(zero_0).
predicate(allocated, allocation, bids, participant).
predicate(allocation_2, bids, allocation).
predicate(gn_defined, real).
predicate(inArgMaxSet, vectorOSqBrRealCSqBr, index).
predicate(inRange, length, index).
predicate(p__GtEq__, real, real).
predicate(p__GtEq___2, nat, nat).
predicate(p__Gt__, real, real).
predicate(p__Gt___2, nat, nat).
predicate(p__LtEq__, real, real).
predicate(p__Lt__, real, real).
predicate(payments_2, bids, payments).
predicate(secondPriceAuction, allocation, payments).
predicate
(secondPriceAuctionLoser, participants, bids, allocation, payments,
 participant).
predicate
(secondPriceAuctionWinner, participants, bids, allocation,
 payments, participant).
sort boolean freely generated by [x_False, x_True].
end_of_list.

list_of_formulae(axioms).
formula
(forall
 ([allocation(Y1), vectorOSqBrRealCSqBr(Y2)], not(equal(Y1, Y2))),
 disjoint_sorts_allocation_vectorOSqBrRealCSqBr).
formula
(forall([allocation(Y1), boolean(Y2)], not(equal(Y1, Y2))),
 disjoint_sorts_allocation_boolean).
formula
(forall([allocation(Y1), nat(Y2)], not(equal(Y1, Y2))),
 disjoint_sorts_allocation_nat).
formula
(forall([allocation(Y1), real(Y2)], not(equal(Y1, Y2))),
 disjoint_sorts_allocation_real).
formula
(forall
 ([vectorOSqBrRealCSqBr(Y1), boolean(Y2)], not(equal(Y1, Y2))),
 disjoint_sorts_vectorOSqBrRealCSqBr_boolean).
formula
(forall([vectorOSqBrRealCSqBr(Y1), nat(Y2)], not(equal(Y1, Y2))),
 disjoint_sorts_vectorOSqBrRealCSqBr_nat).
formula
(forall([vectorOSqBrRealCSqBr(Y1), real(Y2)], not(equal(Y1, Y2))),
 disjoint_sorts_vectorOSqBrRealCSqBr_real).
formula
(forall([boolean(Y1), nat(Y2)], not(equal(Y1, Y2))),
 disjoint_sorts_boolean_nat).
formula
(forall([boolean(Y1), real(Y2)], not(equal(Y1, Y2))),
 disjoint_sorts_boolean_real).
formula
(forall([nat(Y1), real(Y2)], not(equal(Y1, Y2))),
 disjoint_sorts_nat_real).
formula
(forall([boolean(X)], or(equal(X, x_False), equal(X, x_True))),
 ga_exhaustive_generated_sort_Boolean).
formula(exists([Y], allocation(Y)), ga_non_empty_sort_allocation).
formula(exists([Y], bids(Y)), ga_non_empty_sort_bids).
formula(exists([Y], boolean(Y)), ga_non_empty_sort_boolean).
formula(exists([Y], index(Y)), ga_non_empty_sort_index).
formula(exists([Y], length(Y)), ga_non_empty_sort_length).
formula(exists([Y], nat(Y)), ga_non_empty_sort_nat).
formula
(exists([Y], participant(Y)), ga_non_empty_sort_participant).
formula
(exists([Y], participants(Y)), ga_non_empty_sort_participants).
formula(exists([Y], payments(Y)), ga_non_empty_sort_payments).
formula(exists([Y], real(Y)), ga_non_empty_sort_real).
formula(exists([Y], valuations(Y)), ga_non_empty_sort_valuations).
formula
(exists([Y], vectorOSqBrRealCSqBr(Y)),
 ga_non_empty_sort_vectorOSqBrRealCSqBr).
formula(exists([real(X)], gn_defined(X)), ga_nonEmpty_Real).
formula
(forall
 ([real(X)], equiv(not(gn_defined(X)), equal(X, gn_bottom_Real))),
 ga_notDefBottom_Real).
formula(gn_defined(zero), ga_strictness_0).
formula(gn_defined(one), ga_strictness_1).
formula
(forall
 ([real(X_1), real(X_2)], equiv
                          (gn_defined(o__x__(X_1, X_2)),
                           and(gn_defined(X_1), gn_defined(X_2)))),
 ga_strictness___x__).
formula
(forall
 ([real(X_1), real(X_2)], equiv
                          (gn_defined(o__Minus__(X_1, X_2)),
                           and(gn_defined(X_1), gn_defined(X_2)))),
 ga_strictness___Minus__).
formula
(forall([vectorOSqBrRealCSqBr(X_1)], gn_defined(maximum(X_1))),
 ga_strictness_maximum).
formula
(forall
 ([vectorOSqBrRealCSqBr(X_1), index(X_2)], gn_defined
                                           (maximumExcept(X_1, X_2))),
 ga_strictness_maximumExcept).
formula
(forall
 ([payments(X_1), bids(X_2), participant(X_3)], gn_defined
                                                (payment(X_1, X_2, X_3))),
 ga_strictness_payment).
formula
(forall
 ([real(X_1), boolean(X_2), real(X_3)], equiv
                                        (gn_defined(payoff_3(X_1, X_2, X_3)),
                                         and
                                         (gn_defined(X_1), gn_defined(X_3)))),
 ga_strictness_payoff).
formula
(forall
 ([valuations(X_1), bids(X_2), allocation(X_3), payments(X_4),
   participant(X_5)], gn_defined(payoff(X_1, X_2, X_3, X_4, X_5))),
 ga_strictness_payoff_1).
formula
(forall
 ([bids(X_1), participant(X_2)], gn_defined
                                 (secondPriceAuctionWinnersPayment(X_1, X_2))),
 ga_strictness_secondPriceAuctionWinnersPayment).
formula
(forall
 ([real(X_1), real(X_2)], implies
                          (p__Lt__(X_1, X_2),
                           and(gn_defined(X_1), gn_defined(X_2)))),
 ga_predicate_strictness___Lt__).
formula
(forall
 ([real(X_1), real(X_2)], implies
                          (p__LtEq__(X_1, X_2),
                           and(gn_defined(X_1), gn_defined(X_2)))),
 ga_predicate_strictness___LtEq__).
formula
(forall
 ([real(X_1), real(X_2)], implies
                          (p__Gt__(X_1, X_2),
                           and(gn_defined(X_1), gn_defined(X_2)))),
 ga_predicate_strictness___Gt__).
formula
(forall
 ([real(X_1), real(X_2)], implies
                          (p__GtEq__(X_1, X_2),
                           and(gn_defined(X_1), gn_defined(X_2)))),
 ga_predicate_strictness___GtEq__).
formula
(forall
 ([bids(B), participant(Winner)], equal
                                  (secondPriceAuctionWinnersPayment(B, Winner),
                                   maximumExcept(B, Winner))),
 second_price_auction_winners_payment_def).
formula
(forall
 ([allocation(X), payments(P), participants(N), bids(B),
   participant(I)], equiv
                    (secondPriceAuctionWinner(N, B, X, P, I),
                     and
                     (and
                      (and(inRange(N, I), inArgMaxSet(B, I)),
                       allocated(X, B, I)),
                      equal
                      (payment(P, B, I),
                       secondPriceAuctionWinnersPayment(B, I))))),
 second_price_auction_winner_def).
formula
(forall
 ([allocation(X), payments(P), participants(N), bids(B),
   participant(I)], equiv
                    (secondPriceAuctionLoser(N, B, X, P, I),
                     and
                     (and(inRange(N, I), not(allocated(X, B, I))),
                      equal(payment(P, B, I), zero)))),
 second_price_auction_loser_def).
formula
(forall
 ([allocation(X), payments(P)], equiv
                                (secondPriceAuction(X, P),
                                 exists
                                 ([participants(N)], and
                                                     (and
                                                      (p__Gt___2(N, one_0),
                                                       equal(length_1(P), N)),
                                                      forall
                                                      ([bids(B)], implies
                                                                  (equal
                                                                   (length_1(B),
                                                                    N),
                                                                   and
                                                                   (and
                                                                    (allocation_2
                                                                     (B, X),
                                                                     payments_2
                                                                     (B, P)),
                                                                    exists
                                                                    ([participant
                                                                      (I)], and
                                                                            (and
                                                                             (inRange
                                                                              (N,
                                                                               I),
                                                                              secondPriceAuctionWinner
                                                                              (N,
                                                                               B,
                                                                               X,
                                                                               P,
                                                                               I)),
                                                                             forall
                                                                             ([participant
                                                                               (J)], implies
                                                                                     (and
                                                                                      (inRange
                                                                                       (N,
                                                                                        J),
                                                                                       not
                                                                                       (equal
                                                                                        (J,
                                                                                         I))),
                                                                                      secondPriceAuctionLoser
                                                                                      (N,
                                                                                       B,
                                                                                       X,
                                                                                       P,
                                                                                       J)))))))))))),
 second_price_auction_def).
formula
(forall
 ([real(V), real(P), boolean(X)], implies
                                  (and(gn_defined(V), gn_defined(P)),
                                   and
                                   (implies
                                    (equal(X, x_True),
                                     equal
                                     (payoff_3(V, X, P),
                                      o__Minus__(o__x__(V, one), P))),
                                    implies
                                    (not(equal(X, x_True)),
                                     equal
                                     (payoff_3(V, X, P),
                                      o__Minus__(o__x__(V, zero), P)))))),
 payoff_def).
formula
(forall
 ([bids(B), allocation(X)], implies
                            (allocation_2(B, X),
                             exists
                             ([participants(N)], and
                                                 (equal(N, length_1(B)),
                                                  and
                                                  (exists
                                                   ([participant(K)], and
                                                                      (inRange
                                                                       (N, K),
                                                                       allocated
                                                                       (X, B,
                                                                        K))),
                                                   forall
                                                   ([participant(K_1),
                                                     participant(K_2)], implies
                                                                        (and
                                                                         (and
                                                                          (inRange
                                                                           (N,
                                                                            K_1),
                                                                           allocated
                                                                           (X,
                                                                            B,
                                                                            K_1)),
                                                                          and
                                                                          (inRange
                                                                           (N,
                                                                            K_2),
                                                                           allocated
                                                                           (X,
                                                                            B,
                                                                            K_2))),
                                                                         equal
                                                                         (K_1,
                                                                          K_2)))))))),
 allocation_def).
formula
(forall
 ([bids(B), payments(P)], implies
                          (payments_2(B, P), equal(length_1(B), length_1(P)))),
 payments_length_eq_bids_length).
formula
(forall
 ([valuations(V), bids(B), allocation(X), payments(P),
   participant(I)], implies
                    (and
                     (and(allocation_2(B, X), payments_2(B, P)),
                      exists
                      ([participants(N)], and
                                          (equal(N, length_1(B)),
                                           equal(N, length_1(V))))),
                     and
                     (implies
                      (allocated(X, B, I),
                       equal
                       (payoff(V, B, X, P, I),
                        payoff_3
                        (o__OSqBr__CSqBr(V, I), x_True, payment(P, B, I)))),
                      implies
                      (not(allocated(X, B, I)),
                       equal
                       (payoff(V, B, X, P, I),
                        payoff_3
                        (o__OSqBr__CSqBr(V, I), x_False, payment(P, B, I))))))),
 payoff_vector_def).
formula
(forall
 ([bids(B), allocation(X), participants(N), participant(Winner),
   participant(Other)], implies
                        (and
                         (and
                          (and
                           (and
                            (and(allocation_2(B, X), equal(N, length_1(B))),
                             inRange(N, Winner)),
                            allocated(X, B, Winner)),
                           inRange(N, Other)),
                          allocated(X, B, Other)),
                         equal(Other, Winner))),
 allocation_unique).
formula(not(equal(x_True, x_False)), ga_disjoint_True_False).
formula(equal(not__(x_False), x_True), not_False).
formula(equal(not__(x_True), x_False), not_True).
formula(equal(o__And__(x_False, x_False), x_False), and_def1).
formula(equal(o__And__(x_False, x_True), x_False), and_def2).
formula(equal(o__And__(x_True, x_False), x_False), and_def3).
formula(equal(o__And__(x_True, x_True), x_True), and_def4).
formula
(forall
 ([boolean(X), boolean(Y)], equal
                            (o__Or__(X, Y),
                             not__(o__And__(not__(X), not__(Y))))),
 or_def).
formula
(forall
 ([real(X), real(Y)], implies
                      (and(gn_defined(X), gn_defined(Y)),
                       equiv
                       (p__Lt__(X, Y),
                        and(p__LtEq__(X, Y), not(equal(X, Y)))))),
 lt_def).
formula
(forall
 ([real(X), real(Y)], implies
                      (and(gn_defined(X), gn_defined(Y)),
                       equiv(p__Gt__(X, Y), not(p__LtEq__(X, Y))))),
 gt_def).
formula
(forall
 ([real(X), real(Y), real(Z)], implies
                               (and
                                (and(gn_defined(X), gn_defined(Y)),
                                 gn_defined(Z)),
                                implies
                                (and(p__LtEq__(X, Y), p__LtEq__(Y, Z)),
                                 p__LtEq__(X, Z)))),
 lt_trans).
formula
(forall
 ([real(X)], implies(gn_defined(X), equal(o__x__(X, one), X))),
 one_mult).
formula
(forall
 ([real(X)], implies(gn_defined(X), equal(o__x__(X, zero), zero))),
 zero_mult).
formula
(forall
 ([real(X)], implies(gn_defined(X), equal(o__Minus__(X, zero), X))),
 minus_0).
formula
(forall
 ([vectorOSqBrRealCSqBr(V), index(I), length(N)], implies
                                                  (and
                                                   (equal(length_1(V), N),
                                                    inRange(N, I)),
                                                   exists
                                                   ([real(E)], and
                                                               (gn_defined(E),
                                                                equal
                                                                (o__OSqBr__CSqBr
                                                                 (V, I),
                                                                 E))))),
 non_empty_vector_has_elements).
formula
(forall
 ([index(I), length(N)], implies
                         (inRange(N, I), p__Gt___2(N, zero_0))),
 range_not_empty).
formula
(forall
 ([vectorOSqBrRealCSqBr(B), index(I)], equiv
                                       (inArgMaxSet(B, I),
                                        equal
                                        (maximum(B), o__OSqBr__CSqBr(B, I)))),
 arg_max_set_def).
formula
(forall
 ([vectorOSqBrRealCSqBr(B), index(I), length(N)], implies
                                                  (and
                                                   (equal(length_1(B), N),
                                                    inRange(N, I)),
                                                   p__LtEq__
                                                   (o__OSqBr__CSqBr(B, I),
                                                    maximum(B)))),
 maximum_is_greater_or_equal).
formula
(forall
 ([vectorOSqBrRealCSqBr(B), length(N)], implies
                                        (and
                                         (equal(length_1(B), N),
                                          p__Gt___2(N, zero_0)),
                                         exists
                                         ([index(I)], and
                                                      (inRange(N, I),
                                                       equal
                                                       (maximum(B),
                                                        o__OSqBr__CSqBr
                                                        (B, I)))))),
 maximum_is_component).
formula
(forall
 ([vectorOSqBrRealCSqBr(B), length(N), real(M)], implies
                                                 (gn_defined(M),
                                                  implies
                                                  (and
                                                   (and
                                                    (and
                                                     (equal(length_1(B), N),
                                                      p__Gt___2(N, zero_0)),
                                                     forall
                                                     ([index(I)], implies
                                                                  (inRange
                                                                   (N, I),
                                                                   p__LtEq__
                                                                   (o__OSqBr__CSqBr
                                                                    (B, I),
                                                                    M)))),
                                                    exists
                                                    ([index(I)], and
                                                                 (inRange(N, I),
                                                                  equal
                                                                  (M,
                                                                   o__OSqBr__CSqBr
                                                                   (B, I))))),
                                                   equal(M, maximum(B))))),
 maximum_sufficient).
formula
(forall
 ([vectorOSqBrRealCSqBr(B), index(I), index(J), length(N)], implies
                                                            (and
                                                             (and
                                                              (and
                                                               (and
                                                                (equal
                                                                 (length_1(B),
                                                                  N),
                                                                 p__Gt___2
                                                                 (N, one_0)),
                                                                inRange(N, J)),
                                                               inRange(N, I)),
                                                              not(equal(I, J))),
                                                             p__LtEq__
                                                             (o__OSqBr__CSqBr
                                                              (B, I),
                                                              maximumExcept
                                                              (B, J)))),
 maximum_except_is_greater_or_equal).
formula
(forall
 ([vectorOSqBrRealCSqBr(B), index(J), length(N)], implies
                                                  (and
                                                   (and
                                                    (equal(length_1(B), N),
                                                     p__Gt___2(N, one_0)),
                                                    inRange(N, J)),
                                                   exists
                                                   ([index(I)], and
                                                                (and
                                                                 (inRange(N, I),
                                                                  not
                                                                  (equal
                                                                   (I, J))),
                                                                 equal
                                                                 (maximumExcept
                                                                  (B, J),
                                                                  o__OSqBr__CSqBr
                                                                  (B, I)))))),
 maximum_except_is_component).
formula
(forall
 ([vectorOSqBrRealCSqBr(B), index(J), length(N)], implies
                                                  (and
                                                   (and
                                                    (equal(length_1(B), N),
                                                     p__Gt___2(N, one_0)),
                                                    inRange(N, J)),
                                                   p__LtEq__
                                                   (maximumExcept(B, J),
                                                    maximum(B)))),
 maximum_greater_or_equal_remaining_maximum).
formula
(forall
 ([real(X), real(Y)], implies
                      (and(gn_defined(X), gn_defined(Y)),
                       or(p__LtEq__(X, Y), p__LtEq__(Y, X)))),
 dichotomy_TotalOrder).
formula
(forall
 ([real(X), real(Y)], implies
                      (and(gn_defined(X), gn_defined(Y)),
                       implies
                       (and(p__LtEq__(X, Y), p__LtEq__(Y, X)), equal(X, Y)))),
 antisym).
formula
(forall
 ([real(X), real(Y), real(Z)], implies
                               (and
                                (and(gn_defined(X), gn_defined(Y)),
                                 gn_defined(Z)),
                                implies
                                (and(p__LtEq__(X, Y), p__LtEq__(Y, Z)),
                                 p__LtEq__(X, Z)))),
 trans).
formula
(forall([real(X)], implies(gn_defined(X), p__LtEq__(X, X))), refl).
formula
(forall
 ([Y0, Y1, Y2, Y3, Y4], implies
                        (secondPriceAuctionWinner(Y0, Y1, Y2, Y3, Y4),
                         and
                         (and
                          (and(and(participants(Y0), bids(Y1)), allocation(Y2)),
                           payments(Y3)),
                          participant(Y4)))),
 arg_restriction_secondPriceAuctionWinner).
formula
(forall
 ([Y0, Y1, Y2, Y3, Y4], implies
                        (secondPriceAuctionLoser(Y0, Y1, Y2, Y3, Y4),
                         and
                         (and
                          (and(and(participants(Y0), bids(Y1)), allocation(Y2)),
                           payments(Y3)),
                          participant(Y4)))),
 arg_restriction_secondPriceAuctionLoser).
formula
(forall
 ([Y0, Y1], implies
            (secondPriceAuction(Y0, Y1), and(allocation(Y0), payments(Y1)))),
 arg_restriction_secondPriceAuction).
formula
(forall
 ([Y0, Y1], implies
            (payments_2(Y0, Y1), and(bids(Y0), payments(Y1)))),
 arg_restriction_payments_2).
formula
(forall
 ([Y0, Y1], implies(p__Lt__(Y0, Y1), and(real(Y0), real(Y1)))),
 arg_restriction_p__Lt__).
formula
(forall
 ([Y0, Y1], implies(p__LtEq__(Y0, Y1), and(real(Y0), real(Y1)))),
 arg_restriction_p__LtEq__).
formula
(forall
 ([Y0, Y1], implies(p__Gt___2(Y0, Y1), and(nat(Y0), nat(Y1)))),
 arg_restriction_p__Gt___2).
formula
(forall
 ([Y0, Y1], implies(p__Gt__(Y0, Y1), and(real(Y0), real(Y1)))),
 arg_restriction_p__Gt__).
formula
(forall
 ([Y0, Y1], implies(p__GtEq___2(Y0, Y1), and(nat(Y0), nat(Y1)))),
 arg_restriction_p__GtEq___2).
formula
(forall
 ([Y0, Y1], implies(p__GtEq__(Y0, Y1), and(real(Y0), real(Y1)))),
 arg_restriction_p__GtEq__).
formula
(forall
 ([Y0, Y1], implies(inRange(Y0, Y1), and(length(Y0), index(Y1)))),
 arg_restriction_inRange).
formula
(forall
 ([Y0, Y1], implies
            (inArgMaxSet(Y0, Y1), and(vectorOSqBrRealCSqBr(Y0), index(Y1)))),
 arg_restriction_inArgMaxSet).
formula
(forall([Y0], implies(gn_defined(Y0), real(Y0))),
 arg_restriction_gn_defined).
formula
(forall
 ([Y0, Y1], implies
            (allocation_2(Y0, Y1), and(bids(Y0), allocation(Y1)))),
 arg_restriction_allocation_2).
formula
(forall
 ([Y0, Y1, Y2], implies
                (allocated(Y0, Y1, Y2),
                 and(and(allocation(Y0), bids(Y1)), participant(Y2)))),
 arg_restriction_allocated).
end_of_list.
list_of_formulae(conjectures).
formula
(forall
 ([allocation(X), payments(P), participants(N), bids(B),
   participant(MaxBidder)], implies
                            (and
                             (and
                              (and
                               (and
                                (secondPriceAuction(X, P),
                                 equal(N, length_1(P))),
                                equal(N, length_1(B))),
                               inRange(N, MaxBidder)),
                              p__Gt__
                              (o__OSqBr__CSqBr(B, MaxBidder),
                               maximumExcept(B, MaxBidder))),
                             secondPriceAuctionWinner(N, B, X, P, MaxBidder))),
 only_max_bidder_wins).
end_of_list.

list_of_settings(SPASS).
{* set_flag(DocProof, 1).
   set_flag(TimeLimit, 10). *}
end_of_list.

end_problem.